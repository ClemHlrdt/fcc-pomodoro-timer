{"version":3,"sources":["components/Title/Title.jsx","components/Timer/Timer.jsx","components/Progress/Progress.jsx","TimeContext.js","components/Button/Button.jsx","components/TimeController/TimeController.jsx","components/ButtonController/ButtonController.jsx","components/Modal/Modal.js","components/ModalLightMode/ModalLightMode.js","components/Pomodoro/Pomodoro.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","title","Timer","id","mode","time","minutes","Math","floor","seconds","formatTime","currentTime","percent","startingTime","strokeWidth","strokeColor","trailColor","trailWidth","Progress","progress","Array","fill","map","item","index","key","TimeContext","createContext","TimeProvider","useState","session","break","active","name","showModal","isLight","timer","setTimer","Provider","value","children","Button","useContext","buttonId","onClick","actionClick","type","TimeController","changeTimer","operator","labelId","label","lengthId","ButtonController","console","log","myRef","current","pause","Modal","showHideClassName","show","ModalItem","classes","modal__container","onChange","Pomodoro","beep","useRef","useEffect","interval","setInterval","clearInterval","play","playPause","document","body","style","durationId","playing","preload","src","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f92074e0.chunk.js","sourcesContent":["import React from 'react';\nimport './Title.scss';\n\nconst Title = (props) => {\n    return (\n        <header>\n            <h1 className=\"title\">{props.title}</h1>\n        </header>\n    );\n}\n\nexport default Title;","import React from 'react';\nimport { Circle } from 'rc-progress';\nimport './Timer.scss';\n\nconst Timer = props => {\n    function formatTime(time) {\n        let minutes = Math.floor(time / 60);\n        if (minutes < 10) {\n            minutes = '0' + minutes;\n        }\n        let seconds = Math.floor(time - minutes * 60);\n        if (seconds < 10) {\n            seconds = '0' + seconds;\n        }\n        return `${minutes}:${seconds}`;\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <div className=\"counter\">\n                <span className=\"counterType\" id=\"timer-label\">\n                    {props.mode}\n                </span>\n                <span id=\"time-left\">{formatTime(props.time.currentTime)}</span>\n            </div>\n            <div className=\"spinner\">\n                <Circle\n                    percent={\n                        100 -\n                        (props.time.currentTime * 100) / props.time.startingTime\n                    }\n                    strokeWidth=\"6\"\n                    strokeColor=\"#F28458\"\n                    trailColor=\"#DCDEED\"\n                    trailWidth=\"1\"\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Timer;\n","import React from 'react';\nimport './Progress.scss';\n\nconst Progress = props => {\n    let progress = new Array(4).fill(0).fill(true, 0, props.progress);\n    return (\n        <div>\n            {progress.map((item, index) => (\n                <span\n                    key={index}\n                    className={`dot ${progress[index] ? 'completed' : ''}`}\n                ></span>\n            ))}\n        </div>\n    );\n};\n\nexport default Progress;\n","import React, { useState, createContext } from 'react';\n\nexport const TimeContext = createContext();\n\nexport const TimeProvider = props => {\n    const [timer, setTimer] = useState({\n        session: 1500,\n        break: 300,\n        mode: 'session',\n        time: { currentTime: 1500, startingTime: 1500 },\n        active: false,\n        name: 'Pomodoro Timer',\n        progress: 0,\n        showModal: false,\n        isLight: false\n    });\n\n    return (\n        <TimeContext.Provider value={[timer, setTimer]}>\n            {props.children}\n        </TimeContext.Provider>\n    );\n};\n","import React, { useContext } from \"react\";\nimport { TimeContext } from '../../TimeContext';\nimport \"./Button.scss\";\n\nfunction Button(props) {\n  const [timer, setTimer] = useContext(TimeContext);\n\n  return (\n    <button\n      id={props.buttonId}\n      className={timer.isLight ? 'button button-light' : 'button'}\n      onClick={() => props.actionClick(props.type)}\n    >\n      <span className=\"content\">{props.children}</span>\n    </button>\n  );\n}\n\nexport default Button;\n","import React, { useContext } from 'react';\nimport './TimeController.scss';\nimport Button from '../Button/Button';\nimport { TimeContext } from '../../TimeContext';\n\nfunction TimeController(props) {\n    const [timer, setTimer] = useContext(TimeContext);\n\n    // update session time / break time on click\n    const changeTimer = operator => {\n        if (timer.mode === props.type) {\n            if (operator === 'decrement' && timer[props.type] > 60) {\n                //if the current mode && the type are equal change the currentTime & startingTime\n                setTimer({\n                    ...timer,\n                    [props.type]: timer[props.type] - 60, // change session / break time\n                    time: {\n                        currentTime: timer[timer.mode] - 60,\n                        startingTime: timer[timer.mode] - 60\n                    }\n                });\n            }\n            if (operator === 'increment' && timer[props.type] < 3600) {\n                setTimer({\n                    ...timer,\n                    [props.type]: timer[props.type] + 60,\n                    time: {\n                        currentTime: timer[timer.mode] + 60,\n                        startingTime: timer[timer.mode] + 60\n                    }\n                });\n            }\n        } else {\n            let time = timer.time;\n            if (operator === 'decrement' && timer[props.type] > 60) {\n                //if the current mode && the type are equal change the currentTime & startingTime\n                setTimer({\n                    ...timer,\n                    [props.type]: timer[props.type] - 60, // change session / break time\n                    time: time\n                });\n            }\n            if (operator === 'increment' && timer[props.type] < 3600) {\n                setTimer({\n                    ...timer,\n                    [props.type]: timer[props.type] + 60,\n                    time: time\n                });\n            }\n        }\n    };\n\n    return (\n        <div className=\"TimeController\">\n            <Button\n                actionClick={() => changeTimer('decrement')}\n                className=\"controlButton\"\n                buttonId={`${props.type}-decrement`}\n            >\n                -\n            </Button>\n            <div className=\"wrapperDisplay\">\n                <span id={props.labelId} className=\"label\">\n                    {props.label}\n                </span>\n                <span id={props.lengthId} className=\"time\">\n                    {timer[props.type] / 60}\n                </span>\n            </div>\n            <Button\n                actionClick={() => changeTimer('increment')}\n                className=\"controlButton\"\n                buttonId={`${props.type}-increment`}\n            >\n                +\n            </Button>\n        </div>\n    );\n}\n\nexport default TimeController;\n","import React, { useContext } from 'react';\nimport './ButtonController.scss';\nimport Button from '../Button/Button';\nimport { TimeContext } from '../../TimeContext'\n\nfunction ButtonController(props) {\n    const [timer, setTimer] = useContext(TimeContext);\n\n    const resetTime = (sessionValue) => {\n        console.log(timer);\n        setTimer({...timer,\n            session: 1500,\n            break: 300,\n            mode: 'session',\n            time: { currentTime: 1500, startingTime: 1500 },\n            active: false,\n            name: 'Pomodoro Timer',\n            progress: 0,\n            \n        });\n        props.myRef.current.pause();\n        props.myRef.current.currentTime = 0;\n    }\n\n    const setActive = () => {\n        setTimer({\n            ...timer,\n            active: !timer.active\n        })\n    }\n    \n    return (\n        <div className=\"ButtonController\">\n            <Button buttonId=\"reset\" type=\"reset\" actionClick={() => resetTime()}>\n                <i className=\"fas fa-undo-alt\"></i>\n            </Button>\n            <Button buttonId=\"start_stop\" type=\"play\" actionClick={() => setActive()}>\n                <i className={`fas ${timer.active ? \"fa-pause\" : \"fa-play\"}`}></i>\n            </Button>\n        </div>\n    )\n}\n\nexport default ButtonController;","import React, { useContext } from \"react\";\nimport { TimeContext } from \"../../TimeContext\";\nimport \"./Modal.scss\";\n\nconst Modal = props => {\n  const showHideClassName = props.show ? \"modal-show\" : \"modal-hide\";\n  const [timer, setTimer] = useContext(TimeContext);\n  function toggleModal() {\n    setTimer({\n      ...timer,\n      showModal: !timer.showModal\n    });\n  }\n  return (\n    <div id=\"myModal\" className={showHideClassName} onClick={toggleModal}>\n      <div className=\"modal-content\">\n        <span className=\"close\">&times;</span>\n        <div className=\"modal-header\">\n          <h3>{props.title}</h3>\n        </div>\n        <div className=\"modal-body\">{props.children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useContext } from \"react\";\nimport classes from \"./ModalLightMode.scss\";\nimport { TimeContext } from \"../../TimeContext\";\n\nconst ModalItem = props => {\n  const [timer, setTimer] = useContext(TimeContext);\n\n  function toggleDarkMode() {\n    setTimer({\n      ...timer,\n      isLight: !timer.isLight\n    });\n  }\n  return (\n    <div className={classes.modal__container}>\n      <span>Light mode:</span>\n      <div className=\"item\">\n        <input\n          onChange={toggleDarkMode}\n          type=\"checkbox\"\n          name=\"toggle\"\n          id=\"toggle\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ModalItem;\n","import React, { useEffect, useContext, useRef } from \"react\";\nimport \"./Pomodoro.scss\";\nimport Title from \"../Title/Title\";\nimport Timer from \"../Timer/Timer\";\nimport Progress from \"../Progress/Progress\";\nimport TimeController from \"../TimeController/TimeController\";\nimport ButtonController from \"../ButtonController/ButtonController\";\nimport Modal from \"../Modal/Modal\";\nimport ModalLightMode from \"../ModalLightMode/ModalLightMode\";\nimport { TimeContext } from \"../../TimeContext\";\n\nfunction Pomodoro() {\n  const [timer, setTimer] = useContext(TimeContext);\n  // create ref for the audio\n  const beep = useRef();\n\n  function toggleModal() {\n    setTimer({\n      ...timer,\n      showModal: !timer.showModal\n    });\n  }\n\n  useEffect(() => {\n    if (timer.active && timer.time.currentTime > 0) {\n      const interval = setInterval(() => {\n        setTimer({\n          ...timer,\n          time: {\n            startingTime: timer.time.startingTime,\n            currentTime: timer.time.currentTime - 1\n          }\n        });\n      }, 1000);\n      return () => clearInterval(interval);\n    } else if (timer.time.currentTime === 0) {\n      beep.current.play();\n      beep.current.currentTime = 0;\n      if (timer.mode === \"session\") {\n        setTimer({\n          ...timer,\n          time: {\n            currentTime: timer.break,\n            startingTime: timer.break\n          },\n          mode: \"break\"\n        });\n      }\n      if (timer.mode === \"break\") {\n        setTimer({\n          ...timer,\n          time: {\n            currentTime: timer.session,\n            startingTime: timer.session\n          },\n          mode: \"session\",\n          progress: timer.progress + 1\n        });\n      }\n    }\n  }, [setTimer, timer]);\n\n  useEffect(() => {\n    if (timer.playPause) {\n      beep.current.pause();\n      beep.current.currentTime = 0;\n    }\n  });\n\n  useEffect(() => {\n    if (timer.isLight) {\n      document.body.style = \"background: rgb(242, 244, 241);\";\n    }\n  }, [setTimer, timer]);\n\n  return (\n    <div className={timer.isLight ? \"pomodoro pomodoro-light\" : \"pomodoro\"}>\n      <i onClick={() => toggleModal()} className=\"fas fa-cog gear\"></i>\n      <Modal show={timer.showModal} title=\"Settings\">\n        <ModalLightMode />\n      </Modal>\n      <Title title={timer.name} />\n      <Timer time={timer.time} mode={timer.mode} />\n\n      <Progress progress={timer.progress} />\n\n      <TimeController\n        durationId={timer.session}\n        type=\"session\"\n        label={\"Session\"}\n        lengthId={\"session-length\"}\n        labelId={\"session-label\"}\n      />\n      <TimeController\n        durationId={timer.break}\n        type=\"break\"\n        label={\"Break\"}\n        lengthId={\"break-length\"}\n        labelId={\"break-label\"}\n      />\n      <ButtonController playing={timer.active} myRef={beep} />\n      <audio\n        id=\"beep\"\n        preload=\"auto\"\n        src=\"https://www.soundjay.com/misc/sounds/bell-ringing-05.mp3\"\n        ref={beep}\n      ></audio>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","import React from \"react\";\nimport \"./App.scss\";\nimport Pomodoro from \"./components/Pomodoro/Pomodoro\";\nimport { TimeProvider } from \"./TimeContext\";\n\nfunction App() {\n  return (\n    <TimeProvider>\n      <div className=\"App\">\n        <Pomodoro />\n      </div>\n    </TimeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}